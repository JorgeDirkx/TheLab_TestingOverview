************************
Overview Testing:
************************

Acceptance Testing
    |
System Testing
    |
Integration Testing
    |
Unit Testing


========================================
UNIT TESTING BASICS AND FRAMEWORKS:
========================================

import org.junit.*;
import org.junit.rules.TestName;

import java.util.Arrays;
import java.util.List;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertEquals;
@Test
public void whenInstantiated_ThenIdIsSet(){
 TicTacToeGameMove move = new TicTacToeGameMove(1,'X',1,2);
 assertEquals("Asserting that id is set in constructor",1,move.getId();
 }


Before and After each unit test:

    @Before
    public void setupMethod() {
        // called before each method execution
    	move = new TicTacToeGameMove(id, player, x, y);
    	System.out.println("setupMethod");
    }

    @After
    public void cleanupMethod() {
        // called after each method execution
    	move = null;
    	System.out.println("cleanupMethod");
    }

*******************************************************************

  // check allowedChars are O and X after instantiation
    @Test
    public void whenInstantiated_ThenAllowedCharsAreOandX() {
    	List<Character> expectedChars = Arrays.asList('X', 'O');
    	assertTrue(move.getAllowedChars().containsAll(expectedChars));
    	assertEquals(2, move.getAllowedChars().size());
    	System.out.println(name.getMethodName());
    }


// https://github.com/junit-team/junit4/wiki/rules (JUnit interceptors)
    @Rule
    public final TestName name = new TestName();

     // check Rule TestName.getMethodName
        @Test
        public void whenGetMethodNameOfTestNameRuleInvoked_ThenReturnNameOfThisTest() {
        	assertEquals("whenGetMethodNameOfTestNameRuleInvoked_ThenReturnNameOfThisTest", name.getMethodName());
        	System.out.println(name.getMethodName());
        }



Before and After ALL unit tests:

    @BeforeClass
    public static void beforeClass() {
        // called once on class initialization time
    	System.out.println("beforeClass");
    }

    @AfterClass
    public static void afterClass() {
        // called once after all methods are executed
    	System.out.println("afterClass");
    }

***********************************
AssertJ Testing framework:
***********************************

- MAVEN

import com.sybetech.business.TicTacToeGameMove;
import org.junit.Before;
import org.junit.Test;



/**
 * Demo for testing framework util AssertJ
 * Benefits:
 * - fluent
 * - one import
 * use  import static org.assertj.core.api.Java6Assertions.assertThat(.isEqualTo)(.hasSize)(.containsExactlyInAnyOrder)(.containsExactly)
 */
public class TicTacToeGameMoveAssertJTest {

    private TicTacToeGameMove move;
    private final int id = 3;
    private final int x = 1;
    private final int y = 1;
    private final char player = 'X';

    @Before
    public void before() {
        move = new TicTacToeGameMove(id, player, x, y);
    }

    // check id is set after instantiation
    @Test
    public void whenInstantiated_ThenIdIsSet() {
        assertThat(move.getY()).isEqualTo(y);

    }
     // check allowedChars are O and X after instantiation
        @Test
        public void whenInstantiated_ThenAllowedCharsAreOandX() {
            assertThat(move.getAllowedChars()).hasSize(2).contains('X','O');

        }


        =====>>>> FLUENT API !


*********************************************************
IMPLEMENT PERSISTENCE FUNCTIONALITY: DATABASE WRAPPER:
*********************************************************
save state of game in MongoDB

import com.mongodb.DB;
import com.mongodb.MongoClient;

import org.jongo.FindOne;
import org.jongo.Jongo;
import org.jongo.MongoCollection;

public class TicTacToeGameState {

    static final String DB_NAME = "tic-tac-toe-db";
    static final String COLLECTION_NAME = "tic-tac-toe-collection";
    private MongoCollection mongoCollection; // create-read-update-delete

    public TicTacToeGameState() {
        // use new Jongo (MongoClient().getDB).getCollection to initialize mongoCollection
    	mongoCollection = new Jongo (new MongoClient().getDB(DB_NAME)).getCollection(COLLECTION_NAME);
    }

    public boolean save(TicTacToeGameMove move) {
    	try {
    		getMongoCollection().save(move);
		} catch (Exception e) {
			return false;
		}
        return true;
    }

    public boolean clear() {
    	try {
    		getMongoCollection().drop();
		} catch (Exception e) {
			return false;
		}
        return true;
    }

    public TicTacToeGameMove findById(int id) {
    	FindOne dbEntry = getMongoCollection().findOne("{_id:#}", id);
        return dbEntry.as(TicTacToeGameMove.class);//jongo.org;
    }

    public MongoCollection getMongoCollection() {
        return mongoCollection;
    }
}


*****************************************
MOCKITO: testing the DB functionality
*****************************************
import org.jongo.FindOne;
import org.jongo.MongoCollection;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.runners.MockitoJUnitRunner;

import com.mongodb.MongoException;

import java.net.UnknownHostException;
import static org.mockito.Mockito.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
/**
 * Demo for mocking framework Mockito
 * - spy (partial mocking): real object using real methods, unless specified otherwise
 */
@RunWith(MockitoJUnitRunner.class) // creates required mocks and inject them in the test class
//@Ignore
public class TicTacToeGameStateTest {
    /*****************************************************************************************
     * R5: use MongoDB as persistent storage for the game state.
     ****************************************************************************************/

    /**
     * R5.1: implement bean for storage representation TicTacToeGameState
     */

    private TicTacToeGameState state;
    private MongoCollection mongoCollection;
    private TicTacToeGameMove move;

    @Before
    public void setUp() throws UnknownHostException {
        // init move
    	move = new TicTacToeGameMove(1, 'X', 1, 2);

        // use method spy() to partial mock class to test
    	state = spy(new TicTacToeGameState());

        // use method mock(Class) to mock db dependency mongoCollection (all methods are shallow).
    	mongoCollection = mock(MongoCollection.class);

    }

    /**
     * R5.2: specify DB-Name
     */
    @Test
    public void whenInstantiated_ThenMongoHasDbName() throws Exception {
    	assertThat(state.getMongoCollection().getDBCollection().getDB().getName(), equalTo(TicTacToeGameState.DB_NAME));
    }

    /**
     * R5.2: specify the mongo collection-name
     */
    @Test
    public void whenInstantiated_ThenMongoCollectionHasName() throws Exception {
    	assertThat(state.getMongoCollection().getName(), equalTo(TicTacToeGameState.COLLECTION_NAME));
    }

    /**
     * R5.3: save data to mongo-db and return true
     * use doReturn(mockObj).when(classToMock).methodToMock(), verify()
     */
    @Test
    public void whenSave_ThenInvokeMongoCollectionSaveAndReturnTrue() throws Exception {
    	doReturn(mongoCollection).when(state).getMongoCollection();
    	boolean result = state.save(move);
    	assertThat(result, equalTo(true));
    }

    /**
     * R5.4: return false if MongoException occurs while saving
     * use doReturn, doThrow
     */
    @Test
    public void givenMongoException_WhenSave_ThenReturnFalse() {
    	doReturn(mongoCollection).when(state).getMongoCollection();
    	doThrow(new MongoException("saving failed")).when(mongoCollection).save(move);
    	boolean result = state.save(move);
    	assertThat(result, equalTo(false));
    }

    /**
     * R5.5: specify droping data
     */
    @Test
    public void whenClear_ThenInvokeMongoCollectionDrop() {
    	doReturn(mongoCollection).when(state).getMongoCollection();
    	boolean result = state.clear();
    	assertThat(result, equalTo(true));
    	verify(mongoCollection, times(1)).drop();
    }

    /**
     * R5.6: return false if MongoException occurs while dropping
     * use doReturn, doThrow
     * check when exception occurs during clear, then clear returns false
     */
    @Test
    public void givenMongoException_WhenClear_ThenReturnFalse() {
    	doReturn(mongoCollection).when(state).getMongoCollection();
    	doThrow(new MongoException("saving failed")).when(mongoCollection).drop();
    	boolean result = state.clear();
    	assertThat(result, equalTo(false));

    }

    @Test
    public void whenFindById_ThenInvokeMongoCollectionFindOneAndReturnMove() throws Exception {
    	// mock (check behavior)
    	doReturn(mongoCollection).when(state).getMongoCollection();

    	// stubbing (change state /result values
    	FindOne findOne = mock(FindOne.class);
    	doReturn(findOne).when(mongoCollection).findOne("{_id:#}", move.getId());
    	doReturn(move).when(findOne).as(TicTacToeGameMove.class);

    	TicTacToeGameMove result = state.findById(move.getId());
    	assertThat(result, equalTo(move));
    }
}

*******************************************
REVIEW JaCoCO and eclEmma with IntelliJ
*******************************************



========================
1. TDD:
========================

Maven dependencies:
   <properties>
        <maven.compiler.release>11</maven.compiler.release>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <groupId>org.example</groupId>
    <artifactId>tdd3</artifactId>
    <version>1.0-SNAPSHOT</version>
    <dependencies>
        <!-- https://mvnrepository.com/artifact/org.hamcrest/hamcrest-all -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>compile</scope>
        </dependency>
    </dependencies>



Create Test Class using the Enso plug-in: use alt-t

1. create the simplest test you can, name it; the does nothing test.

- while you're writing the test method and List are created, structure is set.
--> Red, Green and Refactor: test will give null pointer exception: see MovieStore Class, refactor, test: Green

 @Test
    public void returnsNoResultsWhenNoTitlesPartiallyMatchSearch() {
        MovieStore movieStore =new MovieStore();
        List<Movies> results = movieStore.findByPartialTitle("abc");
        assertThat(results.size(), is(0));
    }


2. a better test:

    @Test
    public void findsMoviesWhenTitleIsPartiallyMatched() {
        MovieStore movieStore =new MovieStore();
        Movies harryPotter = new Movies("Harry Potter");
        movieStore.add(harryPotter);
        Movies starWars = new Movies("Star Wars");
        movieStore.add(starWars);
        Movies starTrek = new Movies("STAR trek");
        movieStore.add(starTrek);
        List<Movies> results = movieStore.findByPartialTitle("tar");
        //actual --- expected:
        assertThat(results.size(),is(2));
        assertThat(results, containsInAnyOrder(starTrek,starWars));
    }


3. Refactor:

properties +
generate a setup method(shortcut?):

    private final MovieStore movieStore = new MovieStore();

    private final Movie harryPotter = new Movie("Harry Potter", "Rowling", 2000);
    private final Movie starWars = new Movie("Star Wars", "Shwimmer", 1999);
    private final Movie starTrek = new Movie("STAR Trek", "Shwimmer", 2002);
    private final Movie shawshank = new Movie("Shawshank Redemption", "Bob", 2001);
    private final Movie takeThat = new Movie("Take That", "Shwimmer", 2010);

    @Before
    public void setUp() throws Exception {
        movieStore.add(shawshank);
        movieStore.add(harryPotter);
        movieStore.add(starWars);
        movieStore.add(starTrek);
        movieStore.add(takeThat);
    }


4. Full solution:

a.class MovieStore
b.class Movie
c.class MovieStoreTest

import model.Movie;

import java.util.LinkedList;
import java.util.List;

public class MovieStore {
    List<Movie> movies = new LinkedList<Movie>();

    public void add(Movie movie) {
        movies.add(movie);
    }

    public List<Movie> findByPartialTitle(final String partialTitle) {
        return findBy(movie -> movie.title().toUpperCase().contains(partialTitle.toUpperCase()));
    }

    public List<Movie> findByDirector(final String director) {
        return findBy(movie -> movie.director().equals(director));

    }

    public List<Movie> findByReleaseYear(final int from, final int to) {
        return findBy(movie -> movie.releaseYear() > from && movie.releaseYear() < to);

    }

    private List<Movie> findBy(Predicate predicate) {
        List<Movie> result = new LinkedList<Movie>();
        for (Movie movie : movies) {
            if(predicate.matches(movie)){
                result.add(movie);
            }
        }
        return result;
    }

    interface Predicate{
        boolean matches(Movie movie);
    }
}


package model;

public class Movie {
    private String title;
    private String director;
    private int releaseYear;

    public Movie(String title, String director, int releaseYear) {

        this.title = title;
        this.director = director;
        this.releaseYear = releaseYear;
    }

    public String title() {
        return title;
    }

    public String director() {
        return director;
    }

    public int releaseYear() {
        return releaseYear;
    }
}


import model.Movie;
import org.junit.Before;
import org.junit.Test;

import java.util.List;

import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;


public class MovieStoreTest {

    private final MovieStore movieStore = new MovieStore();

    private final Movie harryPotter = new Movie("Harry Potter", "Rowling", 2000);
    private final Movie starWars = new Movie("Star Wars", "Shwimmer", 1999);
    private final Movie starTrek = new Movie("STAR Trek", "Shwimmer", 2002);
    private final Movie shawshank = new Movie("Shawshank Redemption", "Bob", 2001);
    private final Movie takeThat = new Movie("Take That", "Shwimmer", 2010);

    @Before
    public void setUp() throws Exception {
        movieStore.add(shawshank);
        movieStore.add(harryPotter);
        movieStore.add(starWars);
        movieStore.add(starTrek);
        movieStore.add(takeThat);
    }

    @Test
    public void returnsNoResultsWhenNoTitlesPartiallyMatchSearch() throws Exception {
        MovieStore movieStore = new MovieStore();

        List<Movie> results = movieStore.findByPartialTitle("abc");

        assertThat(results.size(), is(0));
    }

    @Test
    public void findsMoviesWhenTitlesArePartiallyMatchedCaseInsensitive() throws Exception {
        List<Movie> results = movieStore.findByPartialTitle("tar");

        assertThat(results.size(), is(2));
        assertThat(results, containsInAnyOrder(starTrek, starWars));
    }

    @Test
    public void findsMoviesWhenDirectorExactlyMatches() throws Exception {
        List<Movie> results = movieStore.findByDirector("Shwimmer");

        assertThat(results.size(), is(3));
        assertThat(results, containsInAnyOrder(starTrek, starWars, takeThat));
    }

    @Test
    public void findsMoviesWhenReleaseYearIsBetweenTwoValues() throws Exception {
        List<Movie> results = movieStore.findByReleaseYear(1999, 2002);

        assertThat(results.size(), is(2));
        assertThat(results, containsInAnyOrder(harryPotter, shawshank));
    }

}



==================================
2. Integration Testing:
==================================

component = class or group of classes
subsystem/system = group of components

-->  testing the interaction of the components in a subsystem

3 strategies:
topdown: begin with root caller, stub uncomplete components
bottom up: begin with elementary components
adhoc: by order of implementation

/**
 * Demo for integration test
 * - tests should run fast. Therefore test only what is not yet unit tested
 * - Requires MongoDB running at default port 27017.
 */
@Ignore
public class TicTacToeGameIntTest {
    /****************************************************************************************
     * BP2: integrate real MongoDb.
     ****************************************************************************************/

    /**
     * 1: interface to MongoDb (drop and save) should work
     */
    @Test
    public void givenMongoDbIsUp_WhenPlay_ThenDropAndSaveWork() {
    	TicTacToeGame game = new TicTacToeGame();
    	TicTacToeGameMove move1 = new TicTacToeGameMove(1, 'X', 1, 1);
    	game.play(move1.getX(), move1.getY());

    	TicTacToeGameMove move2 = new TicTacToeGameMove(2, 'O', 1, 2);
    	game.play(move2.getX(), move2.getY());

    	TicTacToeGameState state = new TicTacToeGameState();
    	TicTacToeGameMove persistedMove1 = state.findById(move1.getId());
    	TicTacToeGameMove persistedMove2 = state.findById(move2.getId());

    	assertThat(persistedMove1, equalTo(move1));
    	assertThat(persistedMove2, equalTo(move2));

    }
}

===============
Smoke Testing:
===============
testing if the system doesn't crash.

// System does not smoke after invocation
@Ignore
public class TicTacToeSmokeTest {

	@Test
	public void whenDeployed_ThenWebsiteIsReachable() throws IOException {
		URL url = new URL("http://localhost:8080/tictactoe");
		URLConnection connection = url.openConnection();
		assertThat(connection.getContent(), notNullValue());
	}

	@Test
	public void whenDeployed_ThenDatabaseIsReachable() throws IOException {
		TicTacToeGameState state = new TicTacToeGameState();
		state.findById(4711);
	}

}


==================================
3. UI and System Testing:
==================================

Functional (black box)Testing: test complete and integrated system
Functionality matters
From user perspective

Main reason ? check that system meets all functional requirements

How ?
Depends on user interface
* REST interface: frameworks resteasy client, jersey client
* GUI: frameworks selenium, selenide

Maven dependencies:

       <!-- Selenide - UI testing framework -->
        <!-- N.B. Selenide 3.6 contains selenium 2.53.0 -->

        <dependency>
            <groupId>com.codeborne</groupId>
            <artifactId>selenide</artifactId>
            <version>3.6</version>
        </dependency>


        <!-- Htmlunit-driver - Use headless web browser htmlunit for UI testing -->

        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
		    <artifactId>htmlunit-driver</artifactId>
		    <version>2.21</version>
        </dependency>


/**
 * System Test.
 * Works only after deployment
 */
@Ignore
public class TicTacToeGameUiST {

	private WebDriver driver;

	@Before
	public void setUp() {
		driver = new HtmlUnitDriver();
	}

	@Test
	public void whenPlayAndWholeHorizontalLineFilled_ThenWinner() throws Exception {
		driver.get(Constants.APP_URL);
		assertThat(driver.getTitle(), equalTo(Constants.APP_TITLE));

		assertThat(play(1,1), equalTo("X"));//x
		assertThat(play(1,2), equalTo("O"));//o
		assertThat(play(2,1), equalTo("X"));//x
		assertThat(play(2,3), equalTo("O"));//o
		assertThat(play(3,1), equalTo("X"));//x

		WebElement result = driver.findElement(By.name("f:result"));
		assertThat(result.getAttribute("value"), equalTo(String.format(TicTacToeGame.RESULT_WINNER, "X")));

	}

	//TODO test vertical, 2 diagonals and draw

	private String play(int x, int y) {
		WebElement btn = driver.findElement(By.name(String.format("f:btn%s_%s", x, y)));
		btn.submit();
		btn = driver.findElement(By.name(String.format("f:btn%s_%s", x, y)));
		return btn.getAttribute("value");
	}

}


=====================
End to End testing:
=====================

/**
 * System Test.
 * Works only after deployment
 */
@Ignore
public class TicTacToeGameE2ETest {

	private WebDriver driver;

	@Before
	public void setUp() {
		driver = new HtmlUnitDriver();
	}

	@Test
	public void whenPlayAndWholeHorizontalLineFilled_ThenWinner() throws Exception {
		driver.get(Constants.APP_URL);
		assertThat(driver.getTitle(), equalTo(Constants.APP_TITLE));

		assertThat(play(1,1), equalTo("X"));//x
		TicTacToeGameState db = new TicTacToeGameState();
		TicTacToeGameMove persistedMove1 = db.findById(1);
		TicTacToeGameMove expectedMove1 = new TicTacToeGameMove(1, 'X', 1, 1);
		assertThat(persistedMove1, equalTo(expectedMove1));

		assertThat(play(1,2), equalTo("O"));//o
		TicTacToeGameMove persistedMove2 = db.findById(2);
		TicTacToeGameMove expectedMove2 = new TicTacToeGameMove(2, 'O', 1, 2);
		assertThat(persistedMove2, equalTo(expectedMove2));

		assertThat(play(2,1), equalTo("X"));//x
		assertThat(play(2,3), equalTo("O"));//o
		assertThat(play(3,1), equalTo("X"));//x

		WebElement result = driver.findElement(By.name("f:result"));
		assertThat(result.getAttribute("value"), equalTo(String.format(TicTacToeGame.RESULT_WINNER, "X")));

	}

	//TODO test vertical, 2 diagonals and draw

	private String play(int x, int y) {
		WebElement btn = driver.findElement(By.name(String.format("f:btn%s_%s", x, y)));
		btn.submit();
		btn = driver.findElement(By.name(String.format("f:btn%s_%s", x, y)));
		return btn.getAttribute("value");
	}

}

=======================
non-functional testing:
=======================

stress test

**
 * Stress Test.
 * Works only after deployment
 */
//@Ignore
public class TicTacToeGamePT {

	private WebDriver driver;

	@Before
	public void setUp() {
		driver = new HtmlUnitDriver();
	}

	@Test
	public void stressTest() throws Exception {
		System.out.println("Testing 1000 rounds. Begin at:" + new Date());
		driver.get(Constants.APP_URL);
		assertThat(driver.getTitle(), equalTo(Constants.APP_TITLE));

		for(int i= 0; i< 1000; i++) {
			playAndCheckARound();
		}
		System.out.println("Testing 1000 rounds. End at:" + new Date());
	}


	public void playAndCheckARound() throws Exception {


		assertThat(play(1,1), equalTo("X"));//x
		assertThat(play(1,2), equalTo("O"));//o
		assertThat(play(2,1), equalTo("X"));//x
		assertThat(play(2,3), equalTo("O"));//o
		assertThat(play(3,1), equalTo("X"));//x

		WebElement result = driver.findElement(By.name("f:result"));
		assertThat(result.getAttribute("value"), equalTo(String.format(TicTacToeGame.RESULT_WINNER, "X")));

		WebElement resetBtn = driver.findElement(By.name("f:reset"));
		resetBtn.submit();

	}

	//TODO test vertical, 2 diagonals and draw

	private String play(int x, int y) {
		WebElement btn = driver.findElement(By.name(String.format("f:btn%s_%s", x, y)));
		btn.submit();
		btn = driver.findElement(By.name(String.format("f:btn%s_%s", x, y)));
		return btn.getAttribute("value");
	}

}

==================================
4. Acceptance Testing:
==================================

Acceptance test: convince stakeholders to accept delivery of system
Define acceptance criteria to be validated

--> acceptance criteria:
- readable by all stakeholders
- executable( repeatable)
- execution reports( formal documentation)

How ? BDD: Behavorial Driven Development
* for all stakeholders: natural language syntax
* outside in: from use case(story/feature) to unit

Userstory (feature)

1 Narrative compact info about feature.
- who is the user
- what is the feature
- for what purpose

N Scenario: the acceptance criteria

N steps: a behavior
* precondition: GIVEN
* action: WHEN
* expected result: THEN

EXAMPLE(store in directory: stories): stories/tictactoe_scenarios.feature

Feature: Play tictactoe win
  As a game member, I want to play TicTacToe, So that I can win

  Scenario: player who connects horizontal line first wins
    Given user browses to http://localhost:8080/tictactoe/
    When first move X is (1,1)
	When second move O is (1,2)
	When thrird move X is (2,1)
	When fourth move O is (2,3)
	When fifth move X is (3,1)
	Then winner is X


===> Cucumber BDD framework(*.feature) or Jbehave BDD framework(*.story) + webtesting framework Selenide and Selenium

Sample with Selenium and Cucumber:

step 1: MAVEN: Cucumber
step 2: CucumberRunner:

package com.sybetech.presentation.bdd.cucumber;

import org.junit.runner.RunWith;

import cucumber.api.CucumberOptions;
import cucumber.api.junit.Cucumber;


/**
 * CucumberRunner: parse features, run CucumberSteps and generate reports
 */

@RunWith(Cucumber.class)
@CucumberOptions(
	features = {"stories"}, // Features path
	glue = {"com.sybetech.presentation.bdd.cucumber"}, // Steps package
	plugin = {"pretty", "html:target/cucumber"} // Reports output path
	)

public class CucumberRunner {
}

step 3: make stories file

step 4: run CucumberRunner as a JUnit test

step 5: go to Console output: copy paste code snippets: go to TicTacToeCumumberSteps class

package com.sybetech.presentation.bdd.cucumber;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.equalTo;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.htmlunit.HtmlUnitDriver;

import com.sybetech.business.TicTacToeGame;

import cucumber.api.java.After;
import cucumber.api.java.Before;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

/**
 * Acceptance test
 * steps matching those in scenarios in feature file
 * works only after deployment
 */
public class TicTacToeCucumberSteps {

	WebDriver driver;

	@Before
	public void setUp() {
		driver = new HtmlUnitDriver();
	}

	@After
	public void tearDown() {
		driver.quit();
	}

	@Given("^user browses to (.*)$")
	public void givenUser_browses_to_http_localhost_tictactoe(String url) throws Throwable {
	    driver.get(url);
	}

	@When("^first move X is \\((\\d+),(\\d+)\\)$")
	public void whenFirst_move_X_is(int x, int y) throws Throwable {
		assertThat(play(x,y), equalTo("X"));
	}

	@When("^second move O is \\((\\d+),(\\d+)\\)$")
	public void second_move_O_is(int x, int y) throws Throwable {
		assertThat(play(x,y), equalTo("O"));
	}

	@When("^thrird move X is \\((\\d+),(\\d+)\\)$")
	public void thrird_move_X_is(int x, int y) throws Throwable {
		assertThat(play(x,y), equalTo("X"));
	}

	@When("^fourth move O is \\((\\d+),(\\d+)\\)$")
	public void fourth_move_O_is(int x, int y) throws Throwable {
		assertThat(play(x,y), equalTo("O"));
	}

	@When("^fifth move X is \\((\\d+),(\\d+)\\)$")
	public void fifth_move_X_is(int x, int y) throws Throwable {
		assertThat(play(x,y), equalTo("X"));
	}

	@Then("^winner is X$")
	public void winner_is_X() throws Throwable {
		WebElement result = driver.findElement(By.name("f:result"));
		assertThat(result.getAttribute("value"), equalTo(String.format(TicTacToeGame.RESULT_WINNER, "X")));
	}

	//re use play method:

	private String play(int x, int y) {
		WebElement btn = driver.findElement(By.name(String.format("f:btn%s_%s", x, y)));
		btn.submit();
		btn = driver.findElement(By.name(String.format("f:btn%s_%s", x, y)));
		return btn.getAttribute("value");
	}

}

step 6: re-test with CucumberRunner
step 7: use target folder(review)

to do: BDD acceptance test with jbehave and selenide